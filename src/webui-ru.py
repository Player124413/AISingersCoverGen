import json
import os
import shutil
import urllib.request
import zipfile
from argparse import ArgumentParser
import time
import gradio as gr
import gdown
from mega import Mega
import requests

from main import song_cover_pipeline

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(os.path.join(BASE_DIR, 'uploads'), exist_ok=True)

mdxnet_models_dir = os.path.join(BASE_DIR, 'mdxnet_models')
rvc_models_dir = os.path.join(BASE_DIR, 'rvc_models')
output_dir = os.path.join(BASE_DIR, 'song_output')

mega = Mega()
m = mega.login()

def get_current_models(models_dir):
    models_list = os.listdir(models_dir)
    items_to_remove = ['hubert_base.pt', 'MODELS.txt', 'public_models.json', 'rmvpe.pt']
    return [item for item in models_list if item not in items_to_remove]

def update_models_list():
    models_l = get_current_models(rvc_models_dir)
    return gr.Dropdown.update(choices=models_l)

def load_public_models():
    models_table = []
    for model in public_models['voice_models']:
        if model['name'] not in voice_models:
            model_info = [model['name'], model['description'], model['credit'], model['url'], ', '.join(model['tags'])]
            models_table.append(model_info)

    tags = list(public_models['tags'].keys())
    return gr.DataFrame.update(value=models_table), gr.CheckboxGroup.update(choices=tags)

def extract_zip(extraction_folder, zip_name):
    os.makedirs(extraction_folder, exist_ok=True)
    with zipfile.ZipFile(zip_name, 'r') as zip_ref:
        zip_ref.extractall(extraction_folder)
    os.remove(zip_name)

    index_filepath, model_filepath = None, None
    for root, dirs, files in os.walk(extraction_folder):
        for name in files:
            if name.endswith('.index') and os.stat(os.path.join(root, name)).st_size > 1024 * 100:
                index_filepath = os.path.join(root, name)

            if name.endswith('.pth') and os.stat(os.path.join(root, name)).st_size > 1024 * 1024 * 40:
                model_filepath = os.path.join(root, name)

    if not model_filepath:
        raise gr.Error(f'–ù–µ –Ω–∞–π–¥–µ–Ω .pth —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º zip. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ {extraction_folder}.')

    os.rename(model_filepath, os.path.join(extraction_folder, os.path.basename(model_filepath)))
    if index_filepath:
        os.rename(index_filepath, os.path.join(extraction_folder, os.path.basename(index_filepath)))

    for filepath in os.listdir(extraction_folder):
        if os.path.isdir(os.path.join(extraction_folder, filepath)):
            shutil.rmtree(os.path.join(extraction_folder, filepath))

def convert_drive_url(url):
    if "drive.google.com" in url:
        file_id = url.split('/d/')[1].split('/')[0]
        direct_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        return direct_url
    return url

def download_yandex_disk_file(yandex_url, output):
    download_url = get_yandex_disk_download_url(yandex_url)
    if download_url:
        urllib.request.urlretrieve(download_url, output)
    else:
        raise gr.Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫–∞.")

def get_yandex_disk_download_url(public_url):
    api_endpoint = "https://cloud-api.yandex.net/v1/disk/public/resources/download"
    response = requests.get(api_endpoint, params={'public_key': public_url})
    download_url = response.json().get('href')
    return download_url

def download_online_model(url, dir_name, progress=gr.Progress()):
    try:
        progress(0, desc=f'[~] –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å –∏–º–µ–Ω–µ–º {dir_name}...')
        zip_name = url.split('/')[-1]
        extraction_folder = os.path.join(rvc_models_dir, dir_name)
        if os.path.exists(extraction_folder):
            raise gr.Error(f'–ö–∞—Ç–∞–ª–æ–≥ –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ {dir_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è —Å–≤–æ–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏.')

        url = convert_drive_url(url)

        if 'drive.google.com' in url:
            gdown.download(url, zip_name, quiet=False)
        elif 'mega.nz' in url:
            m.download_url(url, dest_filename=zip_name)
        elif 'pixeldrain.com' in url:
            url = f'https://pixeldrain.com/api/file/{zip_name}'
            urllib.request.urlretrieve(url, zip_name)
        elif 'disk.yandex.ru' in url:
            download_yandex_disk_file(url, zip_name)
        else:
            urllib.request.urlretrieve(url, zip_name)

        progress(0.5, desc='[~] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ zip...')
        extract_zip(extraction_folder, zip_name)
        return f'[+] –ú–æ–¥–µ–ª—å {dir_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'

    except Exception as e:
        raise gr.Error(str(e))

def upload_local_model(zip_path, dir_name, progress=gr.Progress()):
    try:
        extraction_folder = os.path.join(rvc_models_dir, dir_name)
        if os.path.exists(extraction_folder):
            raise gr.Error(f'–ö–∞—Ç–∞–ª–æ–≥ –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏ {dir_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –¥–ª—è —Å–≤–æ–µ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ–ª–∏.')

        zip_name = zip_path.name
        progress(0.5, desc='[~] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ zip...')
        extract_zip(extraction_folder, zip_name)
        return f'[+] –ú–æ–¥–µ–ª—å {dir_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!'

    except Exception as e:
        raise gr.Error(str(e))

def filter_models(tags, query):
    models_table = []

    if len(tags) == 0 and len(query) == 0:
        for model in public_models['voice_models']:
            models_table.append([model['name'], model['description'], model['credit'], model['url'], model['tags']])

    elif len(tags) > 0 and len(query) > 0:
        for model in public_models['voice_models']:
            if all(tag in model['tags'] for tag in tags):
                model_attributes = f"{model['name']} {model['description']} {model['credit']} {' '.join(model['tags'])}".lower()
                if query.lower() in model_attributes:
                    models_table.append([model['name'], model['description'], model['credit'], model['url'], model['tags']])

    elif len(tags) > 0:
        for model in public_models['voice_models']:
            if all(tag in model['tags'] for tag in tags):
                models_table.append([model['name'], model['description'], model['credit'], model['url'], model['tags']])

    else:
        for model in public_models['voice_models']:
            model_attributes = f"{model['name']} {model['description']} {model['credit']} {' '.join(model['tags'])}".lower()
            if query.lower() in model_attributes:
                models_table.append([model['name'], model['description'], model['credit'], model['url'], model['tags']])

    return gr.DataFrame.update(value=models_table)

def pub_dl_autofill(pub_models, event: gr.SelectData):
    return gr.Text.update(value=pub_models.loc[event.index[0], 'URL']), gr.Text.update(value=pub_models.loc[event.index[0], 'Model Name'])

def swap_visibility():
    return gr.update(visible=True), gr.update(visible=False), gr.update(value=''), gr.update(value=None)

def process_file_upload(file):
    return file.name, gr.update(value=file.name)

def process_record_upload(file):
    if file is None:
        raise gr.Error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—à–∏—Ç–µ –∞—É–¥–∏–æ.")
    
    print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞: {file}")
    
    temp_path = file
    new_path = os.path.join(BASE_DIR, 'uploads', f"recorded_audio_{int(time.time())}.wav")
    
    print(f"–ù–æ–≤—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞: {new_path}")
    
    shutil.copy(temp_path, new_path)
    
    print(f"–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {os.path.exists(new_path)}")
    
    return new_path, gr.update(value=new_path)

def show_hop_slider(pitch_detection_algo):
    if pitch_detection_algo == 'mangio-crepe':
        return gr.update(visible=True)
    else:
        return gr.update(visible=False)

if __name__ == '__main__':
    parser = ArgumentParser(description='–°–æ–∑–¥–∞–Ω–∏–µ AI –∫–∞–≤–µ—Ä–∞ –ø–µ—Å–Ω–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ song_output/id.', add_help=True)
    parser.add_argument("--share", action="store_true", dest="share_enabled", default=False, help="–í–∫–ª—é—á–∏—Ç—å –æ–±–º–µ–Ω")
    parser.add_argument("--listen", action="store_true", default=False, help="–°–¥–µ–ª–∞—Ç—å WebUI –¥–æ—Å—Ç—É–ø–Ω—ã–º –∏–∑ –≤–∞—à–µ–π –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏.")
    parser.add_argument('--listen-host', type=str, help='–•–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.')
    parser.add_argument('--listen-port', type=int, help='–ü–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.')
    args = parser.parse_args()

    voice_models = get_current_models(rvc_models_dir)
    with open(os.path.join(rvc_models_dir, 'public_models.json'), encoding='utf8') as infile:
        public_models = json.load(infile)

    with gr.Blocks(title='üê≥ AISINGERS') as app:

        gr.Label('üê≥ AISINGERS | https://t.me/aisingers', show_label=False)

        with gr.Tab("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"):

            with gr.Accordion('–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏'):
                with gr.Row():
                    with gr.Column():
                        rvc_model = gr.Dropdown(voice_models, label='–ì–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏', info='–ü–∞–ø–∫–∞ –º–æ–¥–µ–ª–µ–π "AICoverGen --> rvc_models". –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –≤ —ç—Ç—É –ø–∞–ø–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.')
                        ref_btn = gr.Button('–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª–∏ üîÅ', variant='primary')

                    with gr.Column() as yt_link_col:
                        song_input = gr.Text(label='–í–≤–æ–¥ –ø–µ—Å–Ω–∏', info='–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–µ—Å–Ω—é –Ω–∞ YouTube –∏–ª–∏ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É. –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.')
                        show_file_upload_button = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')

                    with gr.Column(visible=False) as file_upload_col:
                        local_file = gr.File(label='–ê—É–¥–∏–æ —Ñ–∞–π–ª')
                        song_input_file = gr.UploadButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å üìÇ', file_types=['audio'], variant='primary')
                        show_yt_link_button = gr.Button('–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É YouTube/–ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É')
                        song_input_file.upload(process_file_upload, inputs=[song_input_file], outputs=[local_file, song_input])

                    with gr.Column():
                        record_button = gr.Audio(label='–ó–∞–ø–∏—Å–∞—Ç—å –≤–æ–∫–∞–ª', source="microphone", type="filepath")
                        upload_record_button = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å—å')
                        upload_record_button.click(process_record_upload, inputs=[record_button], outputs=[local_file, song_input])

                    with gr.Column():
                        pitch = gr.Slider(-20, 20, value=0, step=1, label='–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã (—Ç–æ–ª—å–∫–æ –≤–æ–∫–∞–ª)', info='–û–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 12 –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º—É–∂—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ –≤ –∂–µ–Ω—Å–∫–∏–π –∏ -12 –Ω–∞–æ–±–æ—Ä–æ—Ç. (–û–∫—Ç–∞–≤—ã)')
                        pitch_all = gr.Slider(-12, 12, value=0, step=1, label='–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã', info='–ò–∑–º–µ–Ω—è–µ—Ç –≤—ã—Å–æ—Ç—É/—Ç–æ–Ω –≤–æ–∫–∞–ª–∞ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤–º–µ—Å—Ç–µ. –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ö—É–¥—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞. (–ü–æ–ª—É—Ç–æ–Ω–∞)')
                    show_file_upload_button.click(swap_visibility, outputs=[file_upload_col, yt_link_col, song_input, local_file])
                    show_yt_link_button.click(swap_visibility, outputs=[yt_link_col, file_upload_col, song_input, local_file])

            with gr.Accordion('–û–ø—Ü–∏–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞', open=False):
                with gr.Row():
                    index_rate = gr.Slider(0, 1, value=0.5, label='–°–∫–æ—Ä–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏', info="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ü–µ–Ω—Ç AI-–≥–æ–ª–æ—Å–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≤–æ–∫–∞–ª–µ")
                    filter_radius = gr.Slider(0, 7, value=3, step=1, label='–†–∞–¥–∏—É—Å —Ñ–∏–ª—å—Ç—Ä–∞', info='–ï—Å–ª–∏ >=3: –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –º–µ–¥–∏–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≤—ã—Å–æ—Ç—ã –∑–≤—É–∫–∞. –ú–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∏—Ç—å —à—É–º–Ω–æ—Å—Ç—å')
                    rms_mix_rate = gr.Slider(0, 1, value=0.25, label='–°–∫–æ—Ä–æ—Å—Ç—å —Å–º–µ—à–∏–≤–∞–Ω–∏—è RMS', info="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ–∫–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è (0) –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å (1)")
                    protect = gr.Slider(0, 0.5, value=0.33, label='–°–∫–æ—Ä–æ—Å—Ç—å –∑–∞—â–∏—Ç—ã', info='–ó–∞—â–∏—â–∞–µ—Ç –≥–ª—É—Ö–∏–µ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –∏ –∑–≤—É–∫–∏ –¥—ã—Ö–∞–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞ 0.5, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å.')
                    with gr.Column():
                        f0_method = gr.Dropdown(['rmvpe', 'mangio-crepe'], value='rmvpe', label='–ê–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã—Å–æ—Ç—ã –∑–≤—É–∫–∞', info='–õ—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç rmvpe (—è—Å–Ω–æ—Å—Ç—å –≤–æ–∫–∞–ª–∞), –∑–∞—Ç–µ–º mangio-crepe (–≥–ª–∞–¥–∫–æ—Å—Ç—å –≤–æ–∫–∞–ª–∞)')
                        crepe_hop_length = gr.Slider(32, 320, value=128, step=1, visible=False, label='–î–ª–∏–Ω–∞ —Ö–æ–ø–∞ Crepe', info='–ù–∏–∑–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º –∏ –≤—ã—Å–æ–∫–æ–º—É —Ä–∏—Å–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–µ—Ñ–µ–∫—Ç–æ–≤, –Ω–æ –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—ã—Å–æ—Ç—ã –∑–≤—É–∫–∞.')
                        f0_method.change(show_hop_slider, inputs=f0_method, outputs=crepe_hop_length)
                keep_files = gr.Checkbox(label='–°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã', info='–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Å–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ song_output/id, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–∫–∞–ª—ã/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—ã. –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞')

            with gr.Accordion('–û–ø—Ü–∏–∏ –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –∞—É–¥–∏–æ', open=False):
                gr.Markdown('### –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (–¥–µ—Ü–∏–±–µ–ª—ã)')
                with gr.Row():
                    main_gain = gr.Slider(-20, 20, value=0, step=1, label='–û—Å–Ω–æ–≤–Ω–æ–π –≤–æ–∫–∞–ª')
                    backup_gain = gr.Slider(-20, 20, value=0, step=1, label='–†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–æ–∫–∞–ª')
                    inst_gain = gr.Slider(-20, 20, value=0, step=1, label='–ú—É–∑—ã–∫–∞')

                gr.Markdown('### –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ –Ω–∞ AI –≤–æ–∫–∞–ª–µ')
                with gr.Row():
                    reverb_rm_size = gr.Slider(0, 1, value=0.15, label='–†–∞–∑–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã', info='–ß–µ–º –±–æ–ª—å—à–µ –∫–æ–º–Ω–∞—Ç–∞, —Ç–µ–º –¥–æ–ª—å—à–µ –≤—Ä–µ–º—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')
                    reverb_wet = gr.Slider(0, 1, value=0.2, label='–£—Ä–æ–≤–µ–Ω—å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏', info='–£—Ä–æ–≤–µ–Ω—å AI –≤–æ–∫–∞–ª–∞ —Å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π')
                    reverb_dry = gr.Slider(0, 1, value=0.8, label='–£—Ä–æ–≤–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏', info='–£—Ä–æ–≤–µ–Ω—å AI –≤–æ–∫–∞–ª–∞ –±–µ–∑ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')
                    reverb_damping = gr.Slider(0, 1, value=0.7, label='–£—Ä–æ–≤–µ–Ω—å –∑–∞—Ç—É—Ö–∞–Ω–∏—è', info='–ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –≤—ã—Å–æ–∫–∏—Ö —á–∞—Å—Ç–æ—Ç –≤ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏')

                gr.Markdown('### –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ–≤—ã—Ö–æ–¥–∞')
                output_format = gr.Dropdown(['mp3', 'wav'], value='mp3', label='–¢–∏–ø –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞', info='mp3: –º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –ø—Ä–∏–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ. wav: –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ')

            with gr.Row():
                clear_btn = gr.ClearButton(value='–û—á–∏—Å—Ç–∏—Ç—å', components=[song_input, rvc_model, keep_files, local_file])
                generate_btn = gr.Button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", variant='primary')
                ai_cover = gr.Audio(label='AI –∫–∞–≤–µ—Ä', show_share_button=False)

            ref_btn.click(update_models_list, None, outputs=rvc_model)
            is_webui = gr.Number(value=1, visible=False)
            generate_btn.click(song_cover_pipeline,
                               inputs=[song_input, rvc_model, pitch, keep_files, is_webui, main_gain, backup_gain,
                                       inst_gain, index_rate, filter_radius, rms_mix_rate, f0_method, crepe_hop_length,
                                       protect, pitch_all, reverb_rm_size, reverb_wet, reverb_dry, reverb_damping,
                                       output_format],
                               outputs=[ai_cover])
            clear_btn.click(lambda: [0, 0, 0, 0, 0.5, 3, 0.25, 0.33, 'rmvpe', 128, 0, 0.15, 0.2, 0.8, 0.7, 'mp3', None],
                            outputs=[pitch, main_gain, backup_gain, inst_gain, index_rate, filter_radius, rms_mix_rate,
                                     protect, f0_method, crepe_hop_length, pitch_all, reverb_rm_size, reverb_wet,
                                     reverb_dry, reverb_damping, output_format, ai_cover])

        with gr.Tab('–°–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å'):

            with gr.Tab('–°—Å—ã–ª–∫–∏ HuggingFace/Pixeldrain/Google Drive/Mega/–Ø–Ω–¥–µ–∫—Å –î–∏—Å–∫'):
                with gr.Row():
                    model_zip_link = gr.Text(label='–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏', info='–î–æ–ª–∂–µ–Ω –±—ã—Ç—å zip —Ñ–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π .pth —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π .index —Ñ–∞–π–ª.')
                    model_name = gr.Text(label='–ù–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ—é –º–æ–¥–µ–ª—å', info='–î–∞–π—Ç–µ –≤–∞—à–µ–π –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, –æ—Ç–ª–∏—á–Ω–æ–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π.')

                with gr.Row():
                    download_btn = gr.Button('–°–∫–∞—á–∞—Ç—å üåê', variant='primary', scale=19)
                    dl_output_message = gr.Text(label='–í—ã—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', interactive=False, scale=20)

                download_btn.click(download_online_model, inputs=[model_zip_link, model_name], outputs=dl_output_message)

                gr.Markdown('## –ü—Ä–∏–º–µ—Ä—ã –≤–≤–æ–¥–∞')
                gr.Examples(
                    [
                        ['https://huggingface.co/phant0m4r/LiSA/resolve/main/LiSA.zip', 'Lisa'],
                        ['https://pixeldrain.com/u/3tJmABXA', 'Gura'],
                        ['https://huggingface.co/Kit-Lemonfoot/kitlemonfoot_rvc_models/resolve/main/AZKi%20(Hybrid).zip', 'Azki'],
                        ['https://drive.google.com/file/d/1btADHFCL-Xp40qquIrjTNR1QS66qnw_z/view?usp=sharing', 'Google Drive Model'],
                        ['https://mega.nz/file/abcd1234#key', 'Mega Model']
                    ],
                    [model_zip_link, model_name],
                    [],
                    download_online_model,
                )

            with gr.Tab('–ò–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞'):

                gr.Markdown('## –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å')
                gr.Markdown('- –ù–∞–∂–º–∏—Ç–µ "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—É–±–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"')
                gr.Markdown('- –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π—Ç–µ –º–æ–¥–µ–ª–∏ –ø–æ —Ç–µ–≥–∞–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞')
                gr.Markdown('- –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –∏ –∏–º–µ–Ω–∏ –º–æ–¥–µ–ª–∏')
                gr.Markdown('- –ù–∞–∂–º–∏—Ç–µ "–°–∫–∞—á–∞—Ç—å"')

                with gr.Row():
                    pub_zip_link = gr.Text(label='–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏')
                    pub_model_name = gr.Text(label='–ò–º—è –º–æ–¥–µ–ª–∏')

                with gr.Row():
                    download_pub_btn = gr.Button('–°–∫–∞—á–∞—Ç—å üåê', variant='primary', scale=19)
                    pub_dl_output_message = gr.Text(label='–í—ã—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', interactive=False, scale=20)

                filter_tags = gr.CheckboxGroup(value=[], label='–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —Å —Ç–µ–≥–∞–º–∏', choices=[])
                search_query = gr.Text(label='–ü–æ–∏—Å–∫')
                load_public_models_button = gr.Button(value='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—É–±–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π', variant='primary')

                public_models_table = gr.DataFrame(value=[], headers=['–ò–º—è –º–æ–¥–µ–ª–∏', '–û–ø–∏—Å–∞–Ω–∏–µ', '–ö—Ä–µ–¥–∏—Ç', 'URL', '–¢–µ–≥–∏'], label='–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏', interactive=False)
                public_models_table.select(pub_dl_autofill, inputs=[public_models_table], outputs=[pub_zip_link, pub_model_name])
                load_public_models_button.click(load_public_models, outputs=[public_models_table, filter_tags])
                search_query.change(filter_models, inputs=[filter_tags, search_query], outputs=public_models_table)
                filter_tags.change(filter_models, inputs=[filter_tags, search_query], outputs=public_models_table)
                download_pub_btn.click(download_online_model, inputs=[pub_zip_link, pub_model_name], outputs=pub_dl_output_message)

        with gr.Tab('–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å'):
            gr.Markdown('## –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å RVC v2 –∏ —Ñ–∞–π–ª –∏–Ω–¥–µ–∫—Å–∞')
            gr.Markdown('- –ù–∞–π–¥–∏—Ç–µ —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ (–ø–∞–ø–∫–∞ weights) –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–Ω–¥–µ–∫—Å–∞ (–ø–∞–ø–∫–∞ logs/[name])')
            gr.Markdown('- –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ zip –∞—Ä—Ö–∏–≤')
            gr.Markdown('- –ó–∞–≥—Ä—É–∑–∏—Ç–µ zip —Ñ–∞–π–ª –∏ –¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –≥–æ–ª–æ—Å—É')
            gr.Markdown('- –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"')

            with gr.Row():
                with gr.Column():
                    zip_file = gr.File(label='Zip —Ñ–∞–π–ª')

                local_model_name = gr.Text(label='–ò–º—è –º–æ–¥–µ–ª–∏')

            with gr.Row():
                model_upload_button = gr.Button('–ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å', variant='primary', scale=19)
                local_upload_output_message = gr.Text(label='–í—ã—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', interactive=False, scale=20)
                model_upload_button.click(upload_local_model, inputs=[zip_file, local_model_name], outputs=local_upload_output_message)

        with gr.Tab('–ò–ù–§–û'):
            gr.Markdown('## –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ')
            gr.Markdown('**üê£ –¢–ï–õ–ï–ì–†–ê–ú –ö–ê–ù–ê–õ:** https://t.me/aisingers')
            gr.Markdown('**üë§ –ó–ê–ö–ê–ó–ê–¢–¨ –ú–û–î–ï–õ–¨ –ù–ê –ó–ê–ö–ê–ó –¢–ì:** https://t.me/simbioz_2002')
            gr.Markdown('**üê£ YouTube –ö–∞–Ω–∞–ª:** https://www.youtube.com/@DrawAvatarsTV')

    app.launch(
        share=args.share_enabled,
        enable_queue=True,
        server_name=None if not args.listen else (args.listen_host or '0.0.0.0'),
        server_port=args.listen_port or 7860,
    )
